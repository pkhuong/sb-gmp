(require :fiveam)

(defpackage :sb-gmp-test (:use "COMMON-LISP" :it.bese.fiveam))

(in-package :sb-gmp-test)

(def-suite sb-gmp-suite :description "Unit tests for the GMP lib interface.")

(in-suite sb-gmp-suite)

(defparameter *state* (sb-gmp:make-gmp-rstate))
(sb-gmp:rand-seed *state* 1234)

(defmacro defgenerator (name arguments &body body)
  `(defun ,name ,arguments
     (lambda () ,@body)))

(defgenerator gen-mpz (&key (limbs 5))
  (sb-gmp:random-bitcount *state* (* limbs sb-vm:n-word-bits)))

(test mpz-add "Test the mpz-add function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #xFFFFF) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (+ ta tb)
                 (sb-gmp:mpz-add ta tb))))))))

(test mpz-sub "Test the mpz-sub function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x1FFFF) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (- ta tb)
                 (sb-gmp:mpz-sub ta tb))))))))

(test mpz-mul "Test the mpz-mul function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (* ta tb)
                 (sb-gmp:mpz-mul ta tb))))))))

(test mpz-truncate "Test the mpz-tdiv function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (multiple-value-bind (ld lr)
              (truncate ta tb)
            (multiple-value-bind (gd gr)
                (sb-gmp:mpz-tdiv ta tb)
              (is (and (= ld gd)
                       (= lr gr))))))))))

(test mpz-floor "Test the mpz-fdiv function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (multiple-value-bind (ld lr)
              (floor ta tb)
            (multiple-value-bind (gd gr)
                (sb-gmp:mpz-fdiv ta tb)
              (is (and (= ld gd)
                       (= lr gr))))))))))

(test mpz-ceiling "Test the mpz-cdiv function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (multiple-value-bind (ld lr)
              (ceiling ta tb)
            (multiple-value-bind (gd gr)
                (sb-gmp:mpz-cdiv ta tb)
              (is (and (= ld gd)
                       (= lr gr))))))))))

(test mpz-gcd "Test the mpz-gcd function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (gcd ta tb)
                 (sb-gmp:mpz-gcd ta tb))))))))

(test mpz-lcm "Test the mpz-lcm function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (lcm ta tb)
                 (sb-gmp:mpz-lcm ta tb))))))))

(test mpz-isqrt "Test the mpz-isqrt function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (+ (random #x253F) 2)))
      (for-all ((a (gen-mpz :limbs limbs)))
        (is (= (isqrt a)
               (sb-gmp:mpz-sqrt a)))))))

(test mpz-mod "Test the mpz-mod function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x253F))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (b (gen-mpz :limbs limbs)))
        (let ((ta (if (zerop neg-a) a (- a)))
              (tb (if (zerop neg-b) b (- b))))
          (is (= (mod ta (abs tb))
                 (sb-gmp:mpz-mod ta tb))))))))

(test mpz-powm "Test the mpz-powm function"
  (sb-gmp:rand-seed *state* 1234)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x125))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (a (gen-mpz :limbs limbs))
                (m (gen-mpz :limbs (ceiling limbs 2))))
        (let ((e (sb-bignum:make-small-bignum (1+ (random 40))))
              (ta (sb-gmp::bassert (if (zerop neg-a) a (- a)))))
          (is (= (mod (expt ta e) m)
                 (sb-gmp:mpz-powm ta e m))))))))

(test fixed-bugs "Tests for found bugs"
  (is (= (+ #x7FFFFFFFFFFFFFFF #x7FFFFFFFFFFFFFFF)
         (sb-gmp:mpz-add #x7FFFFFFFFFFFFFFF #x7FFFFFFFFFFFFFFF)))
  (let ((a 30951488519636377404900619671461408624764773310745985021994671444676860083493)
        (b 200662724990805535745252242839121922075))
    (multiple-value-bind (ld lr)
        (truncate a b)
      (multiple-value-bind (gd gr)
          (sb-gmp:mpz-tdiv a b)
        (is (and (= ld gd)
                 (= lr gr))))))
  (let ((a 320613729464106236061704728914573914390)
        (b -285049280629101090500613812618405407883))
    (multiple-value-bind (ld lr)
        (truncate a b)
      (multiple-value-bind (gd gr)
          (sb-gmp:mpz-tdiv a b)
        (is (and (= ld gd)
                 (= lr gr)))))))

(test mpz-nextprime "Test the mpz-nextprime/mpz-probably-prime-p function"
  (sb-gmp:rand-seed *state* 6234)
  (let ((limbs (1+ (random #x2F))))
    (for-all ((a (gen-mpz :limbs limbs)))
      (let ((p (sb-gmp:mpz-nextprime a)))
        (is (>= p a))
        (is (> (sb-gmp:mpz-probably-prime-p p) 0))))))

(test mpq-add "Test the mpq-add function"
  (sb-gmp:rand-seed *state* 1235)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x3FF))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (an (gen-mpz :limbs limbs))
                (ad (gen-mpz :limbs limbs))
                (bn (gen-mpz :limbs limbs))
                (bd (gen-mpz :limbs limbs)))
        (let ((tan (if (zerop neg-a) an (- an)))
              (tbn (if (zerop neg-b) bn (- bn))))
          (is (= (+ (/ tan ad) (/ tbn bd))
                 (sb-gmp:mpq-add (/ tan ad) (/ tbn bd)))))))))

(test mpq-sub "Test the mpq-sub function"
  (sb-gmp:rand-seed *state* 1235)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x1FF))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (an (gen-mpz :limbs limbs))
                (ad (gen-mpz :limbs limbs))
                (bn (gen-mpz :limbs limbs))
                (bd (gen-mpz :limbs limbs)))
        (let ((tan (if (zerop neg-a) an (- an)))
              (tbn (if (zerop neg-b) bn (- bn))))
          (is (= (- (/ tan ad) (/ tbn bd))
                 (sb-gmp:mpq-sub (/ tan ad) (/ tbn bd)))))))))

(test mpq-mul "Test the mpq-mul function"
  (sb-gmp:rand-seed *state* 6235)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x5FF))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (an (gen-mpz :limbs limbs))
                (ad (gen-mpz :limbs limbs))
                (bn (gen-mpz :limbs limbs))
                (bd (gen-mpz :limbs limbs)))
        (let ((tan (if (zerop neg-a) an (- an)))
              (tbn (if (zerop neg-b) bn (- bn))))
          (is (= (* (/ tan ad) (/ tbn bd))
                 (sb-gmp:mpq-mul (/ tan ad) (/ tbn bd)))))))))

(test mpq-div "Test the mpq-div function"
  (sb-gmp:rand-seed *state* 7235)
  (dotimes (i 5)
    (let ((limbs (1+ (random #x3FF))))
      (for-all ((neg-a (gen-integer :min 0 :max 1))
                (neg-b (gen-integer :min 0 :max 1))
                (an (gen-mpz :limbs limbs))
                (ad (gen-mpz :limbs limbs))
                (bn (gen-mpz :limbs limbs))
                (bd (gen-mpz :limbs limbs)))
        (let ((tan (if (zerop neg-a) an (- an)))
              (tbn (if (zerop neg-b) bn (- bn))))
          (is (= (/ (/ tan ad) (/ tbn bd))
                 (sb-gmp:mpq-div (/ tan ad) (/ tbn bd)))))))))

(test mpq-fail "Failure condition that was encountered during random testing (since resolved"
  (let ((an -13209053177313216326720071994575668671625946154424946979941042235025779609406066489124822060263741415731767909095535978759309084425875537563179113298131593713396775343237383458479781949550240630412701857403503233189863607072117930640826569182009206708933257720426339611012943709281997759942473045656872630494457723826960825086582617760738451841527423714294371807083373098832437021848589728037526905908672891882725056067884256042505048001986703119531737056795446226445664725837005863750123574298000192591001893057277178437857007262375095660896699217748352172606682055924706139632861269010372898134646451737590670614560649546844481697242528214535706357927544878674268030374370278308504509252394576207386344666818237571152429009824441574054780299582577801481767459654249022803191897258173315859493825673310472505293627476855369546650359583218498516377023038245685243868968780236437619483792036441607501402092965075649435802858970715108833831163596260720848064686538519339195183094001726352453705513582309597381501641400986633247524429625086995030279106454495104883103144972006136945504038625443714829393575431723477731391536529901691154731695666918250476276904458544458920225308813979815661628422015950374787964790294728431305560901981574526733321069031075413803807919559580147250764144945690106618011831706083014149915084399785240071376864007068579410836584583640124573636564525508781814067728494858869755462333538613864275409311494135416846021419052727382769669646774316183742088736319734577932969015168552780639091132865606483317081877017019863932502252092416408465358902183952810083840135676232857108681406486228546498252506817867584563688247332110215273151817829391150607426998926468854041744560970884608178439217990221993505915120441065973024578417594697614340421542869597391944892731436704363092556227861288542154533966853578546397006975240622959448425346779466724647279240015643799101159755851939673521288390733178144929994118609073425419299771438638154675479577257608964922414393526655389054776040890897127353109186990337860645391379224816579489224213787802841647588422060321741574667225867107935341545992758460567691834834677102164126543306712069736700806387259764413531457970954153801229449751018964914808807523738864401593622739672532046389168352737493963609733273138264236810210602108213237142407172633253427427858308191860601367964093868742916150428348086935533601815990061734949289335443255625406474502500919112688955733286467584667225159924898259902443424322015574285591785177463802961642299768433955323304169824647179428285450887144401989305402699455358336862489956755941197154511191311114593457064024159546112615698065878019110371636625550987691920666797008128403458483365368131571213824939808939703491750827705258225332786724552178963564173170124332641627169399852304611511887521527613858208776877706934034658839028986454686812721986441576582538345640083288494377295752136545030030378845647222986379656035835398148857804268458136966853832117064077363965110584146936510473620820871282616637067556761611627531675227320081363307277507286698878265502547270682650862708828)
        (ad
        (bn
        (bd 35047375165067289478184579374088753519723409541358727851367833378045381161956857862822162664157407750114046088766861757768628361860450858550612162200604740528020549735526868301563450011458255876617372435581481413877626213584152958947512852610351865749619221182400335300981664095326585454825312297691968407481156213225240040259895631250587691435815407287057903383853149474327315762925358991507160427907888884554569193526587056400916286053773407408865362995781271043549911925410762585516917061851141429216498699036671966534807428201871680758644707869709055458345849760857447496997369459512430997600004647049262418108322920507202971361167434749566827221165629531524830063260150702915506513004140215619053251853221128227039573877830371056963496851061915005076713551938040426681835756484540822137833583839287273858119692954255679012880175954568099315917680559792168668290774115965992289930491245825501336418496149153195257486784214896251536902218095859878825175930104814002335186480516826697953970017283350762453123058826001074995827392758721263396789788171838854949995547275268946535021565360713052629801500761448894400314861354423310859391743686807240892514171117787583263534162869357320748877744731428554325911583092674254089309526792474206410123702980303052860969897399493933015372688281452770610307341291480264049601427255610847963613178959192364378622499160842253921207881626181581709855849432538739896839132656376924833085425334004208124463768334575132431712512267775703706491862340888727839505443433268529379987084625482496093787809074752688019948611710332687765927010511936393170622967393012885553949858840148946705853974220230333552679372649812288028205467991322591700053013007905861724568610606853496128017958814314450986832892988026223481899589331851816885128871124803692166197269829726785503967919268160500701435937831624617814093029450809869946138434889833384333032268194378347437153894298364527885530000640988674907753972046462491022827738005865076839138904283740722398989182880398823501150929948982395291592901295075465416607929007655790650722355676164182368279922022441635530379579396127841519540366765299138907464310936858631412869302144760544631722698855436241594426632799148068619791910004407651630129367721152620976432342245466252584851082147635414151337510386583270139031454475785430451613760410780963926233601058128946480944715083701501658239619004129521741582609884569752285592082229894073389739632290612979527960898956998537733110196762265428813645010248053457222143316651370707088803028348532186655314492324589438375979080705908912991001132757969685814749516624261196677521777688416066667857217162155509052884746889529221826307232465665939634819692653774644615752505524321373928021711308907637490611431718655229495166013973268494159392003260853439666992720242593681536443289086106672585130316509972729860170549253311425331179571717512946796316828551789499616649200744710228301066546180726362338960578934089254316390186365586939632431422116920095304572927553904681045284800605022616383305331739050601840250168653669981271907611676558111666927724598500621490620608))
    (is (= (+ (/ an ad) (/ bn bd))
           (sb-gmp:mpq-add (/ an ad) (/ bn bd))))))
